// <auto-generated />
using System;
using BeFit.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BeFit.Persistence.Migrations
{
    [DbContext(typeof(BeFitDbContext))]
    [Migration("20240914185325_mig_2")]
    partial class mig_2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BeFit.Domain.Entities.Abstract.Nutrient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PropertiesId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Nutrients", (string)null);

                    b.HasDiscriminator().HasValue("Nutrient");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BeFit.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("BeFit.Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("BeFit.Domain.Entities.Dislike", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Dislikes", (string)null);

                    b.HasDiscriminator().HasValue("Dislike");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BeFit.Domain.Entities.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("BeFit.Domain.Entities.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("RefreshTokenExpiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BeFit.Domain.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Images", (string)null);

                    b.HasDiscriminator().HasValue("Image");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BeFit.Domain.Entities.Like", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Likes", (string)null);

                    b.HasDiscriminator().HasValue("Like");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BeFit.Domain.Entities.Macros.Carbohydrate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("NutrientPropertiesId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("SugarWeight")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("NutrientPropertiesId");

                    b.ToTable("Carbohydrate");
                });

            modelBuilder.Entity("BeFit.Domain.Entities.Macros.Fat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("CholesterolWeight")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("NutrientPropertiesId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("NutrientPropertiesId");

                    b.ToTable("Fat");
                });

            modelBuilder.Entity("BeFit.Domain.Entities.Macros.Protein", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("NutrientPropertiesId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("NutrientPropertiesId");

                    b.ToTable("Protein");
                });

            modelBuilder.Entity("BeFit.Domain.Entities.Minerals", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Calcium")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Iron")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Magnesium")
                        .HasColumnType("numeric");

                    b.Property<Guid>("NutrientPropertiesId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Phosphorus")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Potassium")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Sodium")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Sulfur")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("NutrientPropertiesId");

                    b.ToTable("Minerals");
                });

            modelBuilder.Entity("BeFit.Domain.Entities.NutrientProperties", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("B1")
                        .HasColumnType("numeric");

                    b.Property<decimal>("B12")
                        .HasColumnType("numeric");

                    b.Property<decimal>("B2")
                        .HasColumnType("numeric");

                    b.Property<decimal>("B3")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Calcium")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Calories")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Carbohydrate")
                        .HasColumnType("numeric");

                    b.Property<decimal>("CholesterolWeight")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("E")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Fat")
                        .HasColumnType("numeric");

                    b.Property<decimal>("FolicAcid")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Iron")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Magnesium")
                        .HasColumnType("numeric");

                    b.Property<Guid>("NutrientId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Phosphorus")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Potassium")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Protein")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Salt")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Sodium")
                        .HasColumnType("numeric");

                    b.Property<decimal>("SugarWeight")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Sulfur")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("NutrientId")
                        .IsUnique();

                    b.ToTable("NutrientProperties");
                });

            modelBuilder.Entity("BeFit.Domain.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("BeFit.Domain.Entities.Salt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("NutrientPropertiesId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("NutrientPropertiesId");

                    b.ToTable("Salt");
                });

            modelBuilder.Entity("BeFit.Domain.Entities.UserProperties", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("DailyCalories")
                        .HasColumnType("numeric");

                    b.Property<decimal>("FatBurnCalories")
                        .HasColumnType("numeric");

                    b.Property<decimal>("FatRate")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Height")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MaintenanceCalories")
                        .HasColumnType("numeric");

                    b.Property<Guid>("NeededCarbohydrateId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("NeededFatId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("NeededProteinId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("SuggestedFatRate")
                        .HasColumnType("numeric");

                    b.Property<decimal>("SuggestedWeight")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric");

                    b.Property<decimal>("WeightGainCalories")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("NeededCarbohydrateId");

                    b.HasIndex("NeededFatId");

                    b.HasIndex("NeededProteinId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserProperties");
                });

            modelBuilder.Entity("BeFit.Domain.Entities.Vitamins", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("B1")
                        .HasColumnType("numeric");

                    b.Property<decimal>("B12")
                        .HasColumnType("numeric");

                    b.Property<decimal>("B2")
                        .HasColumnType("numeric");

                    b.Property<decimal>("B3")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("E")
                        .HasColumnType("numeric");

                    b.Property<decimal>("FolicAcid")
                        .HasColumnType("numeric");

                    b.Property<Guid>("NutrientPropertiesId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("NutrientPropertiesId");

                    b.ToTable("Vitamins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BeFit.Domain.Entities.Drink", b =>
                {
                    b.HasBaseType("BeFit.Domain.Entities.Abstract.Nutrient");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.HasIndex("CategoryId");

                    b.HasDiscriminator().HasValue("Drink");
                });

            modelBuilder.Entity("BeFit.Domain.Entities.Food", b =>
                {
                    b.HasBaseType("BeFit.Domain.Entities.Abstract.Nutrient");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.HasIndex("CategoryId");

                    b.ToTable("Nutrients", t =>
                        {
                            t.Property("CategoryId")
                                .HasColumnName("Food_CategoryId");
                        });

                    b.HasDiscriminator().HasValue("Food");
                });

            modelBuilder.Entity("BeFit.Domain.Entities.CommentDislike", b =>
                {
                    b.HasBaseType("BeFit.Domain.Entities.Dislike");

                    b.Property<Guid>("CommentId")
                        .HasColumnType("uuid");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId");

                    b.HasDiscriminator().HasValue("CommentDislike");
                });

            modelBuilder.Entity("BeFit.Domain.Entities.PostDislike", b =>
                {
                    b.HasBaseType("BeFit.Domain.Entities.Dislike");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.HasDiscriminator().HasValue("PostDislike");
                });

            modelBuilder.Entity("BeFit.Domain.Entities.CategoryImage", b =>
                {
                    b.HasBaseType("BeFit.Domain.Entities.Image");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.HasIndex("CategoryId");

                    b.HasDiscriminator().HasValue("CategoryImage");
                });

            modelBuilder.Entity("BeFit.Domain.Entities.NutrientImage", b =>
                {
                    b.HasBaseType("BeFit.Domain.Entities.Image");

                    b.Property<Guid>("NutrientId")
                        .HasColumnType("uuid");

                    b.HasIndex("NutrientId");

                    b.HasDiscriminator().HasValue("FoodImage");
                });

            modelBuilder.Entity("BeFit.Domain.Entities.PostImage", b =>
                {
                    b.HasBaseType("BeFit.Domain.Entities.Image");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.HasIndex("PostId");

                    b.HasDiscriminator().HasValue("PostImage");
                });

            modelBuilder.Entity("BeFit.Domain.Entities.CommentLike", b =>
                {
                    b.HasBaseType("BeFit.Domain.Entities.Like");

                    b.Property<Guid>("CommentId")
                        .HasColumnType("uuid");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId");

                    b.HasDiscriminator().HasValue("CommentLike");
                });

            modelBuilder.Entity("BeFit.Domain.Entities.PostLike", b =>
                {
                    b.HasBaseType("BeFit.Domain.Entities.Like");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.HasDiscriminator().HasValue("PostLike");
                });

            modelBuilder.Entity("BeFit.Domain.Entities.Comment", b =>
                {
                    b.HasOne("BeFit.Domain.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeFit.Domain.Entities.Identity.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BeFit.Domain.Entities.Macros.Carbohydrate", b =>
                {
                    b.HasOne("BeFit.Domain.Entities.NutrientProperties", "NutrientProperties")
                        .WithMany()
                        .HasForeignKey("NutrientPropertiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NutrientProperties");
                });

            modelBuilder.Entity("BeFit.Domain.Entities.Macros.Fat", b =>
                {
                    b.HasOne("BeFit.Domain.Entities.NutrientProperties", "NutrientProperties")
                        .WithMany()
                        .HasForeignKey("NutrientPropertiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NutrientProperties");
                });

            modelBuilder.Entity("BeFit.Domain.Entities.Macros.Protein", b =>
                {
                    b.HasOne("BeFit.Domain.Entities.NutrientProperties", "NutrientProperties")
                        .WithMany()
                        .HasForeignKey("NutrientPropertiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NutrientProperties");
                });

            modelBuilder.Entity("BeFit.Domain.Entities.Minerals", b =>
                {
                    b.HasOne("BeFit.Domain.Entities.NutrientProperties", "NutrientProperties")
                        .WithMany()
                        .HasForeignKey("NutrientPropertiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NutrientProperties");
                });

            modelBuilder.Entity("BeFit.Domain.Entities.NutrientProperties", b =>
                {
                    b.HasOne("BeFit.Domain.Entities.Abstract.Nutrient", "Nutrient")
                        .WithOne("Properties")
                        .HasForeignKey("BeFit.Domain.Entities.NutrientProperties", "NutrientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nutrient");
                });

            modelBuilder.Entity("BeFit.Domain.Entities.Post", b =>
                {
                    b.HasOne("BeFit.Domain.Entities.Identity.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BeFit.Domain.Entities.Salt", b =>
                {
                    b.HasOne("BeFit.Domain.Entities.NutrientProperties", "NutrientProperties")
                        .WithMany()
                        .HasForeignKey("NutrientPropertiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NutrientProperties");
                });

            modelBuilder.Entity("BeFit.Domain.Entities.UserProperties", b =>
                {
                    b.HasOne("BeFit.Domain.Entities.Macros.Carbohydrate", "NeededCarbohydrate")
                        .WithMany()
                        .HasForeignKey("NeededCarbohydrateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeFit.Domain.Entities.Macros.Fat", "NeededFat")
                        .WithMany()
                        .HasForeignKey("NeededFatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeFit.Domain.Entities.Macros.Protein", "NeededProtein")
                        .WithMany()
                        .HasForeignKey("NeededProteinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeFit.Domain.Entities.Identity.User", "User")
                        .WithOne("Properties")
                        .HasForeignKey("BeFit.Domain.Entities.UserProperties", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NeededCarbohydrate");

                    b.Navigation("NeededFat");

                    b.Navigation("NeededProtein");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BeFit.Domain.Entities.Vitamins", b =>
                {
                    b.HasOne("BeFit.Domain.Entities.NutrientProperties", "NutrientProperties")
                        .WithMany()
                        .HasForeignKey("NutrientPropertiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NutrientProperties");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("BeFit.Domain.Entities.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BeFit.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BeFit.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("BeFit.Domain.Entities.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeFit.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BeFit.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeFit.Domain.Entities.Drink", b =>
                {
                    b.HasOne("BeFit.Domain.Entities.Category", null)
                        .WithMany("Drinks")
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("BeFit.Domain.Entities.Food", b =>
                {
                    b.HasOne("BeFit.Domain.Entities.Category", null)
                        .WithMany("Foods")
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("BeFit.Domain.Entities.CommentDislike", b =>
                {
                    b.HasOne("BeFit.Domain.Entities.Comment", "Comment")
                        .WithMany("Dislikes")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeFit.Domain.Entities.Identity.User", "User")
                        .WithMany("CommentDislikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BeFit.Domain.Entities.PostDislike", b =>
                {
                    b.HasOne("BeFit.Domain.Entities.Post", "Post")
                        .WithMany("Dislikes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeFit.Domain.Entities.Identity.User", "User")
                        .WithMany("PostDislikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BeFit.Domain.Entities.CategoryImage", b =>
                {
                    b.HasOne("BeFit.Domain.Entities.Category", "Category")
                        .WithMany("Images")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BeFit.Domain.Entities.NutrientImage", b =>
                {
                    b.HasOne("BeFit.Domain.Entities.Abstract.Nutrient", "Nutrient")
                        .WithMany("Images")
                        .HasForeignKey("NutrientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nutrient");
                });

            modelBuilder.Entity("BeFit.Domain.Entities.PostImage", b =>
                {
                    b.HasOne("BeFit.Domain.Entities.Post", "Post")
                        .WithMany("Images")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("BeFit.Domain.Entities.CommentLike", b =>
                {
                    b.HasOne("BeFit.Domain.Entities.Comment", "Comment")
                        .WithMany("Likes")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeFit.Domain.Entities.Identity.User", "User")
                        .WithMany("CommentLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BeFit.Domain.Entities.PostLike", b =>
                {
                    b.HasOne("BeFit.Domain.Entities.Post", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeFit.Domain.Entities.Identity.User", "User")
                        .WithMany("PostLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BeFit.Domain.Entities.Abstract.Nutrient", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Properties")
                        .IsRequired();
                });

            modelBuilder.Entity("BeFit.Domain.Entities.Category", b =>
                {
                    b.Navigation("Drinks");

                    b.Navigation("Foods");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("BeFit.Domain.Entities.Comment", b =>
                {
                    b.Navigation("Dislikes");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("BeFit.Domain.Entities.Identity.User", b =>
                {
                    b.Navigation("CommentDislikes");

                    b.Navigation("CommentLikes");

                    b.Navigation("Comments");

                    b.Navigation("PostDislikes");

                    b.Navigation("PostLikes");

                    b.Navigation("Posts");

                    b.Navigation("Properties")
                        .IsRequired();
                });

            modelBuilder.Entity("BeFit.Domain.Entities.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Dislikes");

                    b.Navigation("Images");

                    b.Navigation("Likes");
                });
#pragma warning restore 612, 618
        }
    }
}
